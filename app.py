import os
import streamlit as st
from dotenv import load_dotenv
from src.rag import RAGIndex
from src.utils import detect_language_name, OUT_OF_SCOPE, query_requests_language_filter
from src.agent import find_seed_stores_near_whitefield

st.set_page_config(page_title="Boss Wallah ‚Äî Courses Support Bot", page_icon="üß†", layout="wide")
load_dotenv()

st.title(" Boss Wallah ‚Äî Courses Support Chatbot")
st.caption("Ask about our courses in agriculture, business, and personal finance")

@st.cache_resource(show_spinner=False)
def load_index():
    from pathlib import Path
    data_path = Path("data/bw_courses.xlsx")
    if not data_path.exists():
        st.error(f"Dataset not found: {data_path}")
        return None
    try:
        return RAGIndex.from_excel(str(data_path))
    except Exception as e:
        st.error(f"Failed to load dataset: {e}")
        return None

index = load_index()
if index is None:
    st.stop()

def format_courses_response(hits, query, lang_filter=None):
    if not hits:
        return "Sorry, I couldn't find any relevant courses for your query."
    if lang_filter:
        reply = f"Yes, here are our courses available in {lang_filter}:\n"
        reply += '\n'.join([f"- {h.course_title}" for h in hits[:10]])
        if len(hits) > 10:
            reply += "\n...and more!"
        return reply

    # If it's a single course match (e.g.: "Tell me about honey bee farming course")
    if len(hits) == 1 or "about" in query.lower() or "tell me" in query.lower():
        h = hits[0]
        reply = (
            f"**{h.course_title}**\n\n"
            f"{h.about}\n\n"
            f"*Who this course is for*: {h.who_for}\n\n"
            f"*Available in*: {', '.join(sorted(h.languages))}."
        )
        return reply

    # For multi-match, topic-style queries
    reply = "Here are some courses relevant to your question:\n"
    for h in hits[:5]:
        reply += (
            f"\n**{h.course_title}**\n"
            f"{h.about}\n"
            f"*Languages*: {', '.join(sorted(h.languages))}\n"
        )
    if len(hits) > 5:
        reply += "\nLet me know if you want more details about any course."
    return reply

# DAIRY FARM PRACTICAL ANSWERS ‚Äî edit as needed for your region
DAIRY_FARM_INFO = {
    "English": (
        "To start a small-scale dairy farm in India, most experts recommend beginning with 10 to 15 cows. "
        "This allows for manageable operations while still being profitable. Our courses can guide you on "
        "detailed setup, animal care, and business planning."
    ),
    "Hindi": (
        "‡§≠‡§æ‡§∞‡§§ ‡§Æ‡•á‡§Ç ‡§õ‡•ã‡§ü‡•á ‡§∏‡•ç‡§§‡§∞ ‡§ï‡•Ä ‡§°‡•á‡§Ø‡§∞‡•Ä ‡§´‡§æ‡§∞‡•ç‡§Æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§Æ‡§§‡•å‡§∞ ‡§™‡§∞ 10 ‡§∏‡•á 15 ‡§ó‡§æ‡§Ø‡•á‡§Ç ‡§∞‡§ñ‡§®‡§æ ‡§â‡§ö‡§ø‡§§ ‡§π‡•à‡•§ "
        "‡§á‡§∏‡§∏‡•á ‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®‡•Ä‡§Ø ‡§î‡§∞ ‡§≤‡§æ‡§≠‡§ï‡§æ‡§∞‡•Ä ‡§∞‡§π‡§§‡§æ ‡§π‡•à‡•§ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§ï‡•ã‡§∞‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§°‡•Ä‡§ü‡•á‡§≤ ‡§™‡•ç‡§≤‡§æ‡§®‡§ø‡§Ç‡§ó, ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§î‡§∞ ‡§¨‡§ø‡§ú‡§®‡•á‡§∏ ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä‡•§"
    ),
    "Kannada": (
        "‡≤≠‡≤æ‡≤∞‡≤§‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤∏‡≤£‡≥ç‡≤£ ‡≤Æ‡≤ü‡≥ç‡≤ü‡≤¶ ‡≤°‡≥á‡≤∞‡≤ø ‡≤´‡≤æ‡≤∞‡≥ç‡≤Æ‡≥ç ‡≤™‡≥ç‡≤∞‡≤æ‡≤∞‡≤Ç‡≤≠‡≤ø‡≤∏‡≤≤‡≥Å ‡≤∏‡≤æ‡≤Æ‡≤æ‡≤®‡≥ç‡≤Ø‡≤µ‡≤æ‡≤ó‡≤ø 10 ‡≤∞‡≤ø‡≤Ç‡≤¶ 15 ‡≤ó‡≥ã‡≤µ‡≥Å‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥ä‡≤Ç‡≤¶‡≥Å‡≤µ‡≤Ç‡≤§‡≥Ü ‡≤∂‡≤ø‡≤´‡≤æ‡≤∞‡≤∏‡≥Å ‡≤Æ‡≤æ‡≤°‡≥Å‡≤§‡≥ç‡≤§‡≤æ‡≤∞‡≥Ü. "
        "‡≤á‡≤¶‡≥Å ‡≤≤‡≤æ‡≤≠‡≤¶‡≤æ‡≤Ø‡≤ï‡≤µ‡≤æ‡≤ó‡≤ø‡≤¶‡≥ç‡≤¶‡≥Å ‡≤∏‡≥Å‡≤≤‡≤≠‡≤µ‡≤æ‡≤ó‡≤ø ‡≤®‡≤ø‡≤∞‡≥ç‡≤µ‡≤π‡≤ø‡≤∏‡≤¨‡≤π‡≥Å‡≤¶‡≥Å. ‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≤ø‡≤® ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø‡≤ó‡≥Ü ‡≤®‡≤Æ‡≥ç‡≤Æ ‡≤ï‡≥ã‡≤∞‡≥ç‡≤∏‡≥ç‚Äå‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≥ã‡≤°‡≤ø."
    ),
    "Tamil": (
        "‡Æá‡Æ®‡Øç‡Æ§‡Æø‡ÆØ‡Ææ‡Æµ‡Æø‡Æ≤‡Øç ‡Æö‡Æø‡Æ±‡Æø‡ÆØ ‡ÆÖ‡Æ≥‡Æµ‡Æø‡Æ≤‡Øç ‡Æ™‡Æö‡ØÅ ‡Æ™‡Æ£‡Øç‡Æ£‡Øà ‡Æ§‡Øä‡Æü‡Æô‡Øç‡Æï 10 ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡Øç 15 ‡Æ™‡Æö‡ØÅ‡Æï‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Øã‡Æ§‡ØÅ‡ÆÆ‡Ææ‡Æ©‡Æµ‡Øà. "
        "‡Æá‡Æ§‡ØÅ ‡ÆÆ‡ØÅ‡ÆÆ‡Øç‡Æ™‡Øà ‡Æ®‡Æü‡Æ§‡Øç‡Æ§‡Øà ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æ≤‡Ææ‡Æ™‡Æï‡Æ∞‡ÆÆ‡Ææ‡Æ©‡Æ§‡ØÅ. ‡ÆÆ‡Øá‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Æø‡Æµ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æé‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Ææ‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç."
    ),
    "Telugu": (
        "‡∞≠‡∞æ‡∞∞‡∞§‡∞¶‡±á‡∞∂‡∞Ç‡∞≤‡±ã ‡∞ö‡∞ø‡∞®‡±ç‡∞®‡∞™‡∞æ‡∞ü‡∞ø ‡∞°‡±Ü‡∞Ø‡∞ø‡∞∞‡±Ä ‡∞´‡∞æ‡∞∞‡±ç‡∞Æ‡±ç‚Äå ‡∞™‡±ç‡∞∞‡∞æ‡∞∞‡∞Ç‡∞≠‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£‡∞Ç‡∞ó‡∞æ 10 ‡∞®‡±Å‡∞Ç‡∞°‡∞ø 15 ‡∞Ü‡∞µ‡±Å‡∞≤‡±Å ‡∞∏‡∞∞‡∞ø‡∞™‡±ã‡∞§‡∞æ‡∞Ø‡∞ø. "
        "‡∞á‡∞¶‡∞ø ‡∞≤‡∞æ‡∞≠‡∞¶‡∞æ‡∞Ø‡∞ï‡∞Ç‡∞ó‡∞æ ‡∞â‡∞Ç‡∞°‡∞ü‡∞Æ‡±á ‡∞ï‡∞æ‡∞ï‡±Å‡∞Ç‡∞°‡∞æ ‡∞∏‡±Å‡∞≤‡∞≠‡∞Ç‡∞ó‡∞æ ‡∞®‡∞ø‡∞∞‡±ç‡∞µ‡∞π‡∞ø‡∞Ç‡∞ö‡∞µ‡∞ö‡±ç‡∞ö‡±Å. ‡∞Æ‡∞∞‡∞ø‡∞®‡±ç‡∞®‡∞ø ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡∞ï‡±Å ‡∞Æ‡∞æ ‡∞ï‡±ã‡∞∞‡±ç‡∞∏‡±Å‡∞≤‡±Å ‡∞ö‡±Ç‡∞°‡∞Ç‡∞°‡∞ø."
    ),
    "Malayalam": (
        "‡¥á‡¥®‡µç‡¥§‡µç‡¥Ø‡¥Ø‡¥ø‡µΩ ‡¥ö‡µÜ‡¥±‡µÅ‡¥§‡¥æ‡¥Ø‡¥ø ‡¥°‡¥Ø‡¥±‡¥ø ‡¥´‡¥æ‡¥Ç ‡¥§‡µÅ‡¥ü‡¥ô‡µç‡¥ô‡¥æ‡µª 10 ‡¥Æ‡µÅ‡¥§‡µΩ 15 ‡¥™‡¥∂‡µÅ‡¥ï‡µç‡¥ï‡µæ ‡¥Ü‡¥∞‡¥Ç‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥™‡µã‡¥∞‡µÅ‡¥Ç. "
        "‡¥á‡¥§‡µç ‡¥≤‡¥æ‡¥≠‡¥ï‡¥∞‡¥µ‡µÅ‡¥Ç ‡¥ï‡µà‡¥ï‡¥æ‡¥∞‡µç‡¥Ø‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡µª ‡¥é‡¥≥‡µÅ‡¥™‡µç‡¥™‡¥µ‡µÅ‡¥Æ‡¥æ‡¥£‡µç. ‡¥ï‡µÇ‡¥ü‡µÅ‡¥§‡µΩ ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥û‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ï‡µã‡¥¥‡µç‡¥∏‡µÅ‡¥ï‡µæ ‡¥®‡µã‡¥ï‡µç‡¥ï‡µÅ‡¥ï."
    ),
}

def get_dairy_farm_practical_answer(query):
    """
    Returns a practical answer about dairy farm cows in the proper language, if the question matches.
    """
    # Dairy-farm intent triggers (add more as needed)
    triggers = [
        "how many cows", "how many cow", "‡§°‡•á‡§Ø‡§∞‡•Ä ‡§´‡§æ‡§∞‡•ç‡§Æ", "‡§ï‡§ø‡§§‡§®‡•Ä ‡§ó‡§æ‡§Ø",
        "‡≤ó‡≤æ‡≤Ø‡≥ç ‡≤é‡≤∑‡≥ç‡≤ü‡≥Å", "‡≤é‡≤∑‡≥ç‡≤ü‡≥Å ‡≤ó‡≥ã‡≤µ‡≥Å‡≤ó‡≤≥‡≥Å", "‡¥é‡¥§‡µç‡¥∞ ‡¥™‡¥∂‡µÅ", "‡Æé‡Æ§‡Øç‡Æ§‡Æ©‡Øà ‡ÆÆ‡Ææ‡Æü‡ØÅ", "‡∞é‡∞®‡±ç‡∞®‡∞ø ‡∞Ü‡∞µ‡±Å‡∞≤‡±Å"
    ]
    if any(t in query.lower() for t in triggers):
        lang = detect_language_name(query)
        return DAIRY_FARM_INFO.get(lang, DAIRY_FARM_INFO["English"])
    return None

# Streamlit chat window history
if "history" not in st.session_state:
    st.session_state["history"] = []

with st.sidebar:
    st.subheader("Demo prompts")
    for prompt in [
        "Tell me about honey bee farming course",
        "I want to learn how to start a poultry farm",
        "Do you have any courses in Tamil?",
        "I am a recent high school graduate, are there any opportunities for me?",
        "‡§°‡•á‡§Ø‡§∞‡•Ä ‡§´‡§æ‡§∞‡•ç‡§Æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§§‡§®‡•Ä ‡§ó‡§æ‡§Ø ‡§ö‡§æ‡§π‡§ø‡§è?",
        "Are there any stores near Whitefield, Bangalore where I can buy seeds for papaya farming?"
    ]:
        if st.button(prompt):
            st.session_state["q"] = prompt

q = st.text_input(
    "Ask about courses",
    value=st.session_state.get("q", ""),
    placeholder="e.g., Tell me about honey bee farming course"
)

ask_clicked = st.button("Ask")

if ask_clicked or q:
    query = (q or "").strip()
    if not query:
        st.stop()

    # Practical Dairy Farm response (in 6 lang)
    practical_dairy = get_dairy_farm_practical_answer(query)
    if practical_dairy:
        st.session_state["history"].append({"user": query, "bot": practical_dairy})
        for turn in st.session_state["history"]:
            st.markdown(f"**You:** {turn['user']}")
            if turn["bot"]:
                st.markdown(f"{turn['bot']}\n---")
        st.stop()

    # Bonus 2: Store lookup for papaya seeds near Whitefield
    is_whitefield_query = ("whitefield" in query.lower()) and ("seed" in query.lower() or "store" in query.lower())
    if is_whitefield_query:
        with st.spinner("Looking up nearby stores‚Ä¶"):
            results = find_seed_stores_near_whitefield()
        if not results:
            st.info("No external results right now. Try again later.")
        else:
            st.session_state["history"].append({"user": query, "bot": None})
            st.subheader("Nearby stores for papaya seeds")
            for s in results:
                st.write(f"**{s.get('name','(unknown)')}**")
                if s.get('address'): st.write(s['address'])
                if s.get('rating'): st.write(f"Rating: {s['rating']}")
                st.write("---")
        st.stop()

    # Otherwise, query dataset ‚Äî answer in chat style!
    lang_filter = query_requests_language_filter(query)
    if lang_filter:
        hits = index.filter_by_language(lang_filter, k=100)
    else:
        hits = index.search(query, k=6)

    if not hits or (not lang_filter and hits[0].score < 0.05):
        detected = detect_language_name(query)
        response = OUT_OF_SCOPE.get(detected, OUT_OF_SCOPE["English"])
    else:
        response = format_courses_response(hits, query, lang_filter=lang_filter)

    st.session_state["history"].append({"user": query, "bot": response})

# Show conversation like a real chat
for turn in st.session_state["history"]:
    st.markdown(f"**You:** {turn['user']}")
    if turn["bot"]:
        st.markdown(f"{turn['bot']}\n---")
